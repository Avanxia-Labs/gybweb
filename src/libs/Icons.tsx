
/**
 * General Icon Props
 */
export interface GeneralIconProps {
    isActive?: boolean;
    className?: string;
    size?: "sm" | "md" | "lg";
    variant?: 'default' | 'primary'
}

/**
 * CoinsIcon Component
 */
export const CoinsIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M17.25 8.39719V7.875C17.25 5.52375 13.7034 3.75 9 3.75C4.29656 3.75 0.75 5.52375 0.75 7.875V11.625C0.75 13.5834 3.21094 15.1397 6.75 15.6056V16.125C6.75 18.4762 10.2966 20.25 15 20.25C19.7034 20.25 23.25 18.4762 23.25 16.125V12.375C23.25 10.4344 20.8669 8.87625 17.25 8.39719ZM21.75 12.375C21.75 13.6144 18.8634 15 15 15C14.6503 15 14.3034 14.9878 13.9613 14.9653C15.9834 14.2284 17.25 13.0312 17.25 11.625V9.91313C20.0503 10.3303 21.75 11.4628 21.75 12.375ZM6.75 14.0859V11.8556C7.49604 11.9528 8.24765 12.0011 9 12C9.75235 12.0011 10.504 11.9528 11.25 11.8556V14.0859C10.5051 14.196 9.75302 14.2508 9 14.25C8.24698 14.2508 7.49493 14.196 6.75 14.0859ZM15.75 10.3059V11.625C15.75 12.4116 14.5866 13.2562 12.75 13.7691V11.5781C13.9603 11.2847 14.985 10.8478 15.75 10.3059ZM9 5.25C12.8634 5.25 15.75 6.63562 15.75 7.875C15.75 9.11438 12.8634 10.5 9 10.5C5.13656 10.5 2.25 9.11438 2.25 7.875C2.25 6.63562 5.13656 5.25 9 5.25ZM2.25 11.625V10.3059C3.015 10.8478 4.03969 11.2847 5.25 11.5781V13.7691C3.41344 13.2562 2.25 12.4116 2.25 11.625ZM8.25 16.125V15.7341C8.49656 15.7434 8.74594 15.75 9 15.75C9.36375 15.75 9.71906 15.7378 10.0678 15.7172C10.4552 15.8559 10.8499 15.9736 11.25 16.0697V18.2691C9.41344 17.7562 8.25 16.9116 8.25 16.125ZM12.75 18.5859V16.35C13.4958 16.4503 14.2475 16.5004 15 16.5C15.7523 16.5011 16.504 16.4528 17.25 16.3556V18.5859C15.758 18.8047 14.242 18.8047 12.75 18.5859ZM18.75 18.2691V16.0781C19.9603 15.7847 20.985 15.3478 21.75 14.8059V16.125C21.75 16.9116 20.5866 17.7562 18.75 18.2691Z"
                fill="#0F1413" />
        </svg>
    )
}



/**
 * HandCoinsIcon Component
 */
export const HandCoinsIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M21.5934 13.2244C21.3144 13.0096 20.9895 12.8622 20.6442 12.7934C20.2988 12.7246 19.9422 12.7364 19.6022 12.8278L15.6797 13.7297C15.7709 13.3442 15.7738 12.943 15.6879 12.5563C15.6021 12.1695 15.4298 11.8072 15.1841 11.4965C14.9383 11.1858 14.6254 10.9347 14.2688 10.7622C13.9122 10.5896 13.5212 10.5 13.125 10.5H8.43188C8.03775 10.499 7.64733 10.5761 7.28319 10.7269C6.91904 10.8777 6.58838 11.0991 6.31031 11.3784L4.18969 13.5H1.5C1.10218 13.5 0.720644 13.658 0.43934 13.9393C0.158035 14.2206 0 14.6022 0 15L0 18.75C0 19.1478 0.158035 19.5294 0.43934 19.8107C0.720644 20.092 1.10218 20.25 1.5 20.25H11.25C11.3113 20.25 11.3724 20.2425 11.4319 20.2275L17.4319 18.7275C17.4701 18.7184 17.5075 18.7058 17.5434 18.69L21.1875 17.1394L21.2288 17.1206C21.579 16.9456 21.8789 16.6843 22.1002 16.3614C22.3215 16.0385 22.457 15.6645 22.4939 15.2747C22.5307 14.8849 22.4678 14.4922 22.3109 14.1335C22.154 13.7748 21.9084 13.4619 21.5972 13.2244H21.5934ZM1.5 15H3.75V18.75H1.5V15ZM20.5716 15.7697L17.0091 17.2866L11.1562 18.75H5.25V14.5603L7.37156 12.4397C7.51035 12.2998 7.67555 12.1889 7.85758 12.1134C8.03961 12.0379 8.23482 11.9994 8.43188 12H13.125C13.4234 12 13.7095 12.1185 13.9205 12.3295C14.1315 12.5405 14.25 12.8266 14.25 13.125C14.25 13.4234 14.1315 13.7095 13.9205 13.9205C13.7095 14.1315 13.4234 14.25 13.125 14.25H10.5C10.3011 14.25 10.1103 14.329 9.96967 14.4697C9.82902 14.6103 9.75 14.8011 9.75 15C9.75 15.1989 9.82902 15.3897 9.96967 15.5303C10.1103 15.671 10.3011 15.75 10.5 15.75H13.5C13.5565 15.7498 13.6127 15.7436 13.6678 15.7313L19.9491 14.2866L19.9781 14.2791C20.1699 14.2258 20.3745 14.2454 20.5527 14.334C20.7309 14.4226 20.87 14.5739 20.9433 14.7589C21.0167 14.9439 21.0189 15.1495 20.9498 15.3361C20.8806 15.5227 20.7449 15.6771 20.5687 15.7697H20.5716ZM15.375 9C15.5603 9.00021 15.7453 8.98516 15.9281 8.955C16.1338 9.56582 16.51 10.105 17.0124 10.5088C17.5147 10.9125 18.1222 11.164 18.763 11.2335C19.4037 11.3029 20.051 11.1875 20.6282 10.9008C21.2054 10.614 21.6884 10.168 22.0202 9.61547C22.352 9.06291 22.5186 8.42691 22.5004 7.78266C22.4821 7.1384 22.2798 6.51284 21.9173 5.97993C21.5548 5.44703 21.0473 5.02905 20.4548 4.77543C19.8623 4.52181 19.2096 4.44315 18.5737 4.54875C18.3757 3.96023 18.0192 3.43775 17.5434 3.03879C17.0676 2.63984 16.4909 2.37988 15.8769 2.28754C15.2629 2.19519 14.6353 2.27403 14.0631 2.51537C13.491 2.75672 12.9966 3.15123 12.6342 3.65547C12.2719 4.15971 12.0556 4.75414 12.0093 5.37335C11.963 5.99256 12.0885 6.61254 12.3718 7.16506C12.6552 7.71759 13.0854 8.18123 13.6153 8.50497C14.1452 8.82872 14.7541 9.00001 15.375 9ZM21 7.875C21 8.24584 20.89 8.60835 20.684 8.9167C20.478 9.22504 20.1851 9.46536 19.8425 9.60728C19.4999 9.74919 19.1229 9.78632 18.7592 9.71397C18.3955 9.64163 18.0614 9.46305 17.7992 9.20083C17.537 8.9386 17.3584 8.60451 17.286 8.2408C17.2137 7.87708 17.2508 7.50008 17.3927 7.15747C17.5346 6.81486 17.775 6.52202 18.0833 6.316C18.3916 6.10997 18.7542 6 19.125 6C19.6223 6 20.0992 6.19755 20.4508 6.54918C20.8025 6.90081 21 7.37772 21 7.875ZM15.375 3.75C15.784 3.75021 16.1818 3.88416 16.5076 4.13145C16.8334 4.37874 17.0695 4.72579 17.1797 5.11969C16.7956 5.38997 16.4721 5.73744 16.2299 6.13989C15.9878 6.54234 15.8323 6.9909 15.7734 7.45688C15.6425 7.48515 15.509 7.49961 15.375 7.5C14.8777 7.5 14.4008 7.30246 14.0492 6.95083C13.6975 6.5992 13.5 6.12228 13.5 5.625C13.5 5.12772 13.6975 4.65081 14.0492 4.29918C14.4008 3.94755 14.8777 3.75 15.375 3.75Z"
                fill="#0F1413" />
        </svg>
    )
}


/**
 * CoinVerticalIcon Component
 */
export const CoinVerticalIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M18.6103 5.25844C17.4787 3.31875 15.93 2.25 14.25 2.25H9.75C8.07 2.25 6.52125 3.31875 5.38969 5.25844C4.33219 7.07062 3.75 9.46875 3.75 12C3.75 14.5312 4.33219 16.9294 5.38969 18.7416C6.52125 20.6812 8.07 21.75 9.75 21.75H14.25C15.93 21.75 17.4787 20.6812 18.6103 18.7416C19.6678 16.9294 20.25 14.5312 20.25 12C20.25 9.46875 19.6678 7.07062 18.6103 5.25844ZM18.7303 11.25H15.7303C15.6717 9.71096 15.3653 8.19145 14.8228 6.75H17.6906C18.2644 8.00437 18.6431 9.5625 18.7303 11.25ZM16.7991 5.25H14.1056C13.7924 4.70655 13.4146 4.2029 12.9806 3.75H14.25C15.1875 3.75 16.0688 4.3125 16.7991 5.25ZM5.25 12C5.25 7.52812 7.3125 3.75 9.75 3.75C12.1875 3.75 14.25 7.52812 14.25 12C14.25 16.4719 12.1875 20.25 9.75 20.25C7.3125 20.25 5.25 16.4719 5.25 12ZM14.25 20.25H12.9834C13.4174 19.7971 13.7952 19.2935 14.1084 18.75H16.8019C16.0688 19.6875 15.1875 20.25 14.25 20.25ZM17.6906 17.25H14.8237C15.3662 15.8085 15.6727 14.289 15.7313 12.75H18.7313C18.6431 14.4375 18.2644 15.9956 17.6906 17.25Z" fill="#0F1413" />
        </svg>
    )
}


/**
 * CardholderIcon Component
 */
export const CardholderIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M19.5 4.5H4.5C3.90326 4.5 3.33097 4.73705 2.90901 5.15901C2.48705 5.58097 2.25 6.15326 2.25 6.75V17.25C2.25 17.8467 2.48705 18.419 2.90901 18.841C3.33097 19.2629 3.90326 19.5 4.5 19.5H19.5C20.0967 19.5 20.669 19.2629 21.091 18.841C21.5129 18.419 21.75 17.8467 21.75 17.25V6.75C21.75 6.15326 21.5129 5.58097 21.091 5.15901C20.669 4.73705 20.0967 4.5 19.5 4.5ZM3.75 9H20.25V10.5H15C14.8011 10.5 14.6103 10.579 14.4697 10.7197C14.329 10.8603 14.25 11.0511 14.25 11.25C14.25 11.8467 14.0129 12.419 13.591 12.841C13.169 13.2629 12.5967 13.5 12 13.5C11.4033 13.5 10.831 13.2629 10.409 12.841C9.98705 12.419 9.75 11.8467 9.75 11.25C9.75 11.0511 9.67098 10.8603 9.53033 10.7197C9.38968 10.579 9.19891 10.5 9 10.5H3.75V9ZM4.5 6H19.5C19.6989 6 19.8897 6.07902 20.0303 6.21967C20.171 6.36032 20.25 6.55109 20.25 6.75V7.5H3.75V6.75C3.75 6.55109 3.82902 6.36032 3.96967 6.21967C4.11032 6.07902 4.30109 6 4.5 6ZM19.5 18H4.5C4.30109 18 4.11032 17.921 3.96967 17.7803C3.82902 17.6397 3.75 17.4489 3.75 17.25V12H8.325C8.49714 12.8477 8.95705 13.6099 9.62681 14.1573C10.2966 14.7047 11.135 15.0038 12 15.0038C12.865 15.0038 13.7034 14.7047 14.3732 14.1573C15.043 13.6099 15.5029 12.8477 15.675 12H20.25V17.25C20.25 17.4489 20.171 17.6397 20.0303 17.7803C19.8897 17.921 19.6989 18 19.5 18Z" fill="black" />
        </svg>
    )
}



/**
 * ArrowCircleRightIcon Component
 */
export const ArrowCircleRightIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 2.25C10.0716 2.25 8.18657 2.82183 6.58319 3.89317C4.97982 4.96451 3.73013 6.48726 2.99218 8.26884C2.25422 10.0504 2.06114 12.0108 2.43735 13.9021C2.81355 15.7934 3.74215 17.5307 5.10571 18.8943C6.46928 20.2579 8.20656 21.1865 10.0979 21.5627C11.9892 21.9389 13.9496 21.7458 15.7312 21.0078C17.5127 20.2699 19.0355 19.0202 20.1068 17.4168C21.1782 15.8134 21.75 13.9284 21.75 12C21.7473 9.41498 20.7192 6.93661 18.8913 5.10872C17.0634 3.28084 14.585 2.25273 12 2.25ZM12 20.25C10.3683 20.25 8.77326 19.7661 7.41655 18.8596C6.05984 17.9531 5.00242 16.6646 4.378 15.1571C3.75358 13.6496 3.5902 11.9908 3.90853 10.3905C4.22685 8.79016 5.01259 7.32015 6.16637 6.16637C7.32016 5.01259 8.79017 4.22685 10.3905 3.90852C11.9909 3.59019 13.6497 3.75357 15.1571 4.37799C16.6646 5.00242 17.9531 6.05984 18.8596 7.41655C19.7661 8.77325 20.25 10.3683 20.25 12C20.2475 14.1873 19.3775 16.2843 17.8309 17.8309C16.2843 19.3775 14.1873 20.2475 12 20.25ZM16.2806 11.4694C16.3504 11.539 16.4057 11.6217 16.4434 11.7128C16.4812 11.8038 16.5006 11.9014 16.5006 12C16.5006 12.0986 16.4812 12.1962 16.4434 12.2872C16.4057 12.3783 16.3504 12.461 16.2806 12.5306L13.2806 15.5306C13.1399 15.6714 12.949 15.7504 12.75 15.7504C12.551 15.7504 12.3601 15.6714 12.2194 15.5306C12.0786 15.3899 11.9996 15.199 11.9996 15C11.9996 14.801 12.0786 14.6101 12.2194 14.4694L13.9397 12.75H8.25C8.05109 12.75 7.86033 12.671 7.71967 12.5303C7.57902 12.3897 7.5 12.1989 7.5 12C7.5 11.8011 7.57902 11.6103 7.71967 11.4697C7.86033 11.329 8.05109 11.25 8.25 11.25H13.9397L12.2194 9.53063C12.0786 9.38989 11.9996 9.19902 11.9996 9C11.9996 8.80098 12.0786 8.61011 12.2194 8.46937C12.3601 8.32864 12.551 8.24958 12.75 8.24958C12.949 8.24958 13.1399 8.32864 13.2806 8.46937L16.2806 11.4694Z" fill="black" />
        </svg>
    )
}

/**
 * BrowserIcon Component
 */
export const BrowserIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M20.25 3.75H3.75C3.35218 3.75 2.97064 3.90804 2.68934 4.18934C2.40804 4.47064 2.25 4.85218 2.25 5.25V18.75C2.25 19.1478 2.40804 19.5294 2.68934 19.8107C2.97064 20.092 3.35218 20.25 3.75 20.25H20.25C20.6478 20.25 21.0294 20.092 21.3107 19.8107C21.592 19.5294 21.75 19.1478 21.75 18.75V5.25C21.75 4.85218 21.592 4.47064 21.3107 4.18934C21.0294 3.90804 20.6478 3.75 20.25 3.75ZM20.25 5.25V8.25H3.75V5.25H20.25ZM20.25 18.75H3.75V9.75H20.25V18.75Z" fill="black" />
        </svg>
    )
}

/**
 * PresentationChartIcon Component
 */
export const PresentationChartIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M20.25 3.75H12.75V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V3.75H3.75C3.35218 3.75 2.97064 3.90804 2.68934 4.18934C2.40804 4.47064 2.25 4.85218 2.25 5.25V16.5C2.25 16.8978 2.40804 17.2794 2.68934 17.5607C2.97064 17.842 3.35218 18 3.75 18H7.44L5.41406 20.5313C5.28974 20.6867 5.23225 20.8851 5.25422 21.0829C5.2762 21.2807 5.37585 21.4616 5.53125 21.5859C5.68665 21.7103 5.88507 21.7678 6.08286 21.7458C6.28066 21.7238 6.46162 21.6242 6.58594 21.4688L9.36 18H14.64L17.4141 21.4688C17.4756 21.5457 17.5517 21.6098 17.638 21.6573C17.7244 21.7048 17.8192 21.7349 17.9171 21.7458C18.0151 21.7567 18.1142 21.7481 18.2088 21.7207C18.3035 21.6933 18.3918 21.6475 18.4688 21.5859C18.5457 21.5244 18.6098 21.4483 18.6573 21.362C18.7048 21.2756 18.7349 21.1808 18.7458 21.0829C18.7567 20.9849 18.7481 20.8858 18.7207 20.7912C18.6933 20.6965 18.6475 20.6082 18.5859 20.5313L16.56 18H20.25C20.6478 18 21.0294 17.842 21.3107 17.5607C21.592 17.2794 21.75 16.8978 21.75 16.5V5.25C21.75 4.85218 21.592 4.47064 21.3107 4.18934C21.0294 3.90804 20.6478 3.75 20.25 3.75ZM20.25 16.5H3.75V5.25H20.25V16.5ZM9.75 11.25V13.5C9.75 13.6989 9.67098 13.8897 9.53033 14.0303C9.38968 14.171 9.19891 14.25 9 14.25C8.80109 14.25 8.61032 14.171 8.46967 14.0303C8.32902 13.8897 8.25 13.6989 8.25 13.5V11.25C8.25 11.0511 8.32902 10.8603 8.46967 10.7197C8.61032 10.579 8.80109 10.5 9 10.5C9.19891 10.5 9.38968 10.579 9.53033 10.7197C9.67098 10.8603 9.75 11.0511 9.75 11.25ZM12.75 9.75V13.5C12.75 13.6989 12.671 13.8897 12.5303 14.0303C12.3897 14.171 12.1989 14.25 12 14.25C11.8011 14.25 11.6103 14.171 11.4697 14.0303C11.329 13.8897 11.25 13.6989 11.25 13.5V9.75C11.25 9.55109 11.329 9.36032 11.4697 9.21967C11.6103 9.07902 11.8011 9 12 9C12.1989 9 12.3897 9.07902 12.5303 9.21967C12.671 9.36032 12.75 9.55109 12.75 9.75ZM15.75 8.25V13.5C15.75 13.6989 15.671 13.8897 15.5303 14.0303C15.3897 14.171 15.1989 14.25 15 14.25C14.8011 14.25 14.6103 14.171 14.4697 14.0303C14.329 13.8897 14.25 13.6989 14.25 13.5V8.25C14.25 8.05109 14.329 7.86032 14.4697 7.71967C14.6103 7.57902 14.8011 7.5 15 7.5C15.1989 7.5 15.3897 7.57902 15.5303 7.71967C15.671 7.86032 15.75 8.05109 15.75 8.25Z" fill="black" />
        </svg>
    )
}

/**
 * MapPinAreaIcon Component
 */
export const MapPinAreaIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10.5 7.5C10.5 7.20333 10.588 6.91332 10.7528 6.66665C10.9176 6.41997 11.1519 6.22771 11.426 6.11418C11.7001 6.00065 12.0017 5.97094 12.2926 6.02882C12.5836 6.0867 12.8509 6.22956 13.0607 6.43934C13.2704 6.64912 13.4133 6.91639 13.4712 7.20736C13.5291 7.49834 13.4994 7.79994 13.3858 8.07403C13.2723 8.34811 13.08 8.58238 12.8334 8.7472C12.5867 8.91203 12.2967 9 12 9C11.6022 9 11.2206 8.84196 10.9393 8.56066C10.658 8.27936 10.5 7.89782 10.5 7.5ZM6 7.5C6 5.9087 6.63214 4.38258 7.75736 3.25736C8.88258 2.13214 10.4087 1.5 12 1.5C13.5913 1.5 15.1174 2.13214 16.2426 3.25736C17.3679 4.38258 18 5.9087 18 7.5C18 13.1203 12.6019 16.2694 12.375 16.4016C12.2617 16.4663 12.1334 16.5004 12.0028 16.5004C11.8723 16.5004 11.744 16.4663 11.6306 16.4016C11.3981 16.2694 6 13.125 6 7.5ZM7.5 7.5C7.5 11.4563 10.86 14.0822 12 14.8594C13.1391 14.0831 16.5 11.4563 16.5 7.5C16.5 6.30653 16.0259 5.16193 15.182 4.31802C14.3381 3.47411 13.1935 3 12 3C10.8065 3 9.66193 3.47411 8.81802 4.31802C7.97411 5.16193 7.5 6.30653 7.5 7.5ZM19.0097 13.8403C18.8251 13.7793 18.624 13.7924 18.4489 13.8768C18.2738 13.9612 18.1382 14.1102 18.0709 14.2926C18.0035 14.475 18.0096 14.6764 18.0879 14.8543C18.1661 15.0323 18.3104 15.1729 18.4903 15.2466C20.0381 15.8194 21 16.5863 21 17.25C21 18.5025 17.5763 20.25 12 20.25C6.42375 20.25 3 18.5025 3 17.25C3 16.5863 3.96187 15.8194 5.50969 15.2475C5.6896 15.1739 5.8339 15.0332 5.91215 14.8553C5.99039 14.6773 5.99648 14.4759 5.92913 14.2935C5.86178 14.1112 5.72624 13.9621 5.5511 13.8777C5.37596 13.7933 5.17491 13.7803 4.99031 13.8412C2.73937 14.6709 1.5 15.8822 1.5 17.25C1.5 20.1731 6.91031 21.75 12 21.75C17.0897 21.75 22.5 20.1731 22.5 17.25C22.5 15.8822 21.2606 14.6709 19.0097 13.8403Z" fill="black" />
        </svg>
    )
}

/**
 * CurrencyDollarSimpleIcon Component
 */
export const CurrencyDollarSimpleIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M18.75 15.75C18.7488 16.9431 18.2743 18.087 17.4306 18.9306C16.587 19.7743 15.4431 20.2488 14.25 20.25H12.75V21.75C12.75 21.9489 12.671 22.1397 12.5303 22.2803C12.3897 22.421 12.1989 22.5 12 22.5C11.8011 22.5 11.6103 22.421 11.4697 22.2803C11.329 22.1397 11.25 21.9489 11.25 21.75V20.25H9.75C8.55691 20.2488 7.41303 19.7743 6.56939 18.9306C5.72575 18.087 5.25124 16.9431 5.25 15.75C5.25 15.5511 5.32902 15.3603 5.46967 15.2197C5.61032 15.079 5.80109 15 6 15C6.19891 15 6.38968 15.079 6.53033 15.2197C6.67098 15.3603 6.75 15.5511 6.75 15.75C6.75 16.5456 7.06607 17.3087 7.62868 17.8713C8.19129 18.4339 8.95435 18.75 9.75 18.75H14.25C15.0456 18.75 15.8087 18.4339 16.3713 17.8713C16.9339 17.3087 17.25 16.5456 17.25 15.75C17.25 14.9544 16.9339 14.1913 16.3713 13.6287C15.8087 13.0661 15.0456 12.75 14.25 12.75H10.5C9.30653 12.75 8.16193 12.2759 7.31802 11.432C6.47411 10.5881 6 9.44347 6 8.25C6 7.05653 6.47411 5.91193 7.31802 5.06802C8.16193 4.22411 9.30653 3.75 10.5 3.75H11.25V2.25C11.25 2.05109 11.329 1.86032 11.4697 1.71967C11.6103 1.57902 11.8011 1.5 12 1.5C12.1989 1.5 12.3897 1.57902 12.5303 1.71967C12.671 1.86032 12.75 2.05109 12.75 2.25V3.75H13.5C14.6931 3.75124 15.837 4.22575 16.6806 5.06939C17.5243 5.91303 17.9988 7.05691 18 8.25C18 8.44891 17.921 8.63968 17.7803 8.78033C17.6397 8.92098 17.4489 9 17.25 9C17.0511 9 16.8603 8.92098 16.7197 8.78033C16.579 8.63968 16.5 8.44891 16.5 8.25C16.5 7.45435 16.1839 6.69129 15.6213 6.12868C15.0587 5.56607 14.2956 5.25 13.5 5.25H10.5C9.70435 5.25 8.94129 5.56607 8.37868 6.12868C7.81607 6.69129 7.5 7.45435 7.5 8.25C7.5 9.04565 7.81607 9.80871 8.37868 10.3713C8.94129 10.9339 9.70435 11.25 10.5 11.25H14.25C15.4431 11.2512 16.587 11.7257 17.4306 12.5694C18.2743 13.413 18.7488 14.5569 18.75 15.75Z" fill="black" />
        </svg>
    )
}

/**
 * CurrencyDollarIcon Component
 */
export const CurrencyDollarIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M14.25 11.25H12.75V5.25H13.5C14.2956 5.25 15.0587 5.56607 15.6213 6.12868C16.1839 6.69129 16.5 7.45435 16.5 8.25C16.5 8.44891 16.579 8.63968 16.7197 8.78033C16.8603 8.92098 17.0511 9 17.25 9C17.4489 9 17.6397 8.92098 17.7803 8.78033C17.921 8.63968 18 8.44891 18 8.25C17.9988 7.05691 17.5243 5.91303 16.6806 5.06939C15.837 4.22575 14.6931 3.75124 13.5 3.75H12.75V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V3.75H10.5C9.30653 3.75 8.16193 4.22411 7.31802 5.06802C6.47411 5.91193 6 7.05653 6 8.25C6 9.44347 6.47411 10.5881 7.31802 11.432C8.16193 12.2759 9.30653 12.75 10.5 12.75H11.25V18.75H9.75C8.95435 18.75 8.19129 18.4339 7.62868 17.8713C7.06607 17.3087 6.75 16.5456 6.75 15.75C6.75 15.5511 6.67098 15.3603 6.53033 15.2197C6.38968 15.079 6.19891 15 6 15C5.80109 15 5.61032 15.079 5.46967 15.2197C5.32902 15.3603 5.25 15.5511 5.25 15.75C5.25124 16.9431 5.72575 18.087 6.56939 18.9306C7.41303 19.7743 8.55691 20.2488 9.75 20.25H11.25V21.75C11.25 21.9489 11.329 22.1397 11.4697 22.2803C11.6103 22.421 11.8011 22.5 12 22.5C12.1989 22.5 12.3897 22.421 12.5303 22.2803C12.671 22.1397 12.75 21.9489 12.75 21.75V20.25H14.25C15.4435 20.25 16.5881 19.7759 17.432 18.932C18.2759 18.0881 18.75 16.9435 18.75 15.75C18.75 14.5565 18.2759 13.4119 17.432 12.568C16.5881 11.7241 15.4435 11.25 14.25 11.25ZM10.5 11.25C9.70435 11.25 8.94129 10.9339 8.37868 10.3713C7.81607 9.80871 7.5 9.04565 7.5 8.25C7.5 7.45435 7.81607 6.69129 8.37868 6.12868C8.94129 5.56607 9.70435 5.25 10.5 5.25H11.25V11.25H10.5ZM14.25 18.75H12.75V12.75H14.25C15.0456 12.75 15.8087 13.0661 16.3713 13.6287C16.9339 14.1913 17.25 14.9544 17.25 15.75C17.25 16.5456 16.9339 17.3087 16.3713 17.8713C15.8087 18.4339 15.0456 18.75 14.25 18.75Z" fill="black" />
        </svg>
    )
}

/**
 * ChatCenteredTextIcon Component
 */
export const ChatCenteredTextIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8.25 9.75C8.25 9.55109 8.32902 9.36032 8.46967 9.21967C8.61032 9.07902 8.80109 9 9 9H15C15.1989 9 15.3897 9.07902 15.5303 9.21967C15.671 9.36032 15.75 9.55109 15.75 9.75C15.75 9.94891 15.671 10.1397 15.5303 10.2803C15.3897 10.421 15.1989 10.5 15 10.5H9C8.80109 10.5 8.61032 10.421 8.46967 10.2803C8.32902 10.1397 8.25 9.94891 8.25 9.75ZM9 13.5H15C15.1989 13.5 15.3897 13.421 15.5303 13.2803C15.671 13.1397 15.75 12.9489 15.75 12.75C15.75 12.5511 15.671 12.3603 15.5303 12.2197C15.3897 12.079 15.1989 12 15 12H9C8.80109 12 8.61032 12.079 8.46967 12.2197C8.32902 12.3603 8.25 12.5511 8.25 12.75C8.25 12.9489 8.32902 13.1397 8.46967 13.2803C8.61032 13.421 8.80109 13.5 9 13.5ZM21.75 5.25V17.25C21.75 17.6478 21.592 18.0294 21.3107 18.3107C21.0294 18.592 20.6478 18.75 20.25 18.75H14.5847L13.3022 20.9944C13.171 21.2239 12.9814 21.4146 12.7527 21.5473C12.5241 21.68 12.2644 21.7499 12 21.7499C11.7356 21.7499 11.4759 21.68 11.2473 21.5473C11.0186 21.4146 10.829 21.2239 10.6978 20.9944L9.41531 18.75H3.75C3.35218 18.75 2.97064 18.592 2.68934 18.3107C2.40804 18.0294 2.25 17.6478 2.25 17.25V5.25C2.25 4.85218 2.40804 4.47064 2.68934 4.18934C2.97064 3.90804 3.35218 3.75 3.75 3.75H20.25C20.6478 3.75 21.0294 3.90804 21.3107 4.18934C21.592 4.47064 21.75 4.85218 21.75 5.25ZM20.25 5.25H3.75V17.25H9.85031C9.9831 17.2488 10.1138 17.2829 10.2291 17.3488C10.3444 17.4147 10.4402 17.51 10.5066 17.625L12.0066 20.25L13.5066 17.625C13.573 17.51 13.6687 17.4147 13.784 17.3488C13.8993 17.2829 14.03 17.2488 14.1628 17.25H20.25V5.25Z" fill="black" />
        </svg>
    )
}

/**
 * EnvelopeSimpleOpenIcon Component
 */
export const EnvelopeSimpleOpenIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M21.4163 8.37562L12.4163 2.37562C12.293 2.29339 12.1482 2.24951 12 2.24951C11.8518 2.24951 11.707 2.29339 11.5837 2.37562L2.58375 8.37562C2.48101 8.44417 2.39679 8.53703 2.33857 8.64595C2.28034 8.75488 2.24992 8.87649 2.25 9V18.75C2.25 19.1478 2.40804 19.5294 2.68934 19.8107C2.97064 20.092 3.35218 20.25 3.75 20.25H20.25C20.6478 20.25 21.0294 20.092 21.3107 19.8107C21.592 19.5294 21.75 19.1478 21.75 18.75V9C21.7501 8.87649 21.7197 8.75488 21.6614 8.64595C21.6032 8.53703 21.519 8.44417 21.4163 8.37562ZM12 3.90094L19.6791 9.02062L13.3978 13.5H10.6041L4.32281 9.02062L12 3.90094ZM3.75 18.75V10.4559L9.92813 14.8622C10.0553 14.953 10.2077 15.0019 10.3641 15.0019H13.6359C13.7923 15.0019 13.9447 14.953 14.0719 14.8622L20.25 10.4559V18.75H3.75Z" fill="black" />
        </svg>
    )
}

/**
 * TagIcon Component
 */
export const TagIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M22.8103 12.75L13.5 3.43969C13.3612 3.29979 13.196 3.18888 13.014 3.1134C12.832 3.03792 12.6368 2.99937 12.4397 3H3.75001C3.5511 3 3.36033 3.07902 3.21968 3.21967C3.07903 3.36032 3.00001 3.55109 3.00001 3.75V12.4397C2.99938 12.6367 3.03792 12.832 3.11341 13.014C3.18889 13.196 3.2998 13.3612 3.43969 13.5L12.75 22.8103C12.8893 22.9496 13.0547 23.0602 13.2367 23.1356C13.4187 23.211 13.6138 23.2498 13.8108 23.2498C14.0078 23.2498 14.2029 23.211 14.3849 23.1356C14.5669 23.0602 14.7323 22.9496 14.8716 22.8103L22.8103 14.8716C22.9496 14.7323 23.0602 14.5669 23.1356 14.3849C23.211 14.2029 23.2498 14.0078 23.2498 13.8108C23.2498 13.6138 23.211 13.4187 23.1356 13.2367C23.0602 13.0547 22.9496 12.8893 22.8103 12.75ZM13.8103 21.75L4.50001 12.4397V4.5H12.4397L21.75 13.8103L13.8103 21.75ZM9.00001 7.875C9.00001 8.0975 8.93403 8.31501 8.81041 8.50002C8.68679 8.68502 8.51109 8.82922 8.30553 8.91436C8.09996 8.99951 7.87376 9.02179 7.65553 8.97838C7.4373 8.93498 7.23685 8.82783 7.07951 8.6705C6.92218 8.51316 6.81503 8.31271 6.77162 8.09448C6.72822 7.87625 6.75049 7.65005 6.83564 7.44448C6.92079 7.23891 7.06499 7.06321 7.24999 6.9396C7.435 6.81598 7.6525 6.75 7.87501 6.75C8.17338 6.75 8.45952 6.86853 8.6705 7.0795C8.88148 7.29048 9.00001 7.57663 9.00001 7.875Z" fill="black" />
        </svg>
    )
}

/**
 * CashRegisterIcon Component
 */
export const CashRegisterIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M22.4775 14.8181L20.37 6.38625C20.2888 6.06159 20.1015 5.77338 19.8376 5.56749C19.5738 5.3616 19.2487 5.24984 18.9141 5.25H12.75V3.75C12.75 3.35218 12.592 2.97064 12.3107 2.68934C12.0294 2.40804 11.6478 2.25 11.25 2.25H7.5C7.10218 2.25 6.72064 2.40804 6.43934 2.68934C6.15804 2.97064 6 3.35218 6 3.75V5.25H5.08594C4.75128 5.24984 4.42619 5.3616 4.16237 5.56749C3.89855 5.77338 3.71115 6.06159 3.63 6.38625L1.5225 14.8181C1.50753 14.8776 1.49997 14.9387 1.5 15V18C1.5 18.3978 1.65804 18.7794 1.93934 19.0607C2.22064 19.342 2.60218 19.5 3 19.5H21C21.3978 19.5 21.7794 19.342 22.0607 19.0607C22.342 18.7794 22.5 18.3978 22.5 18V15C22.5 14.9387 22.4925 14.8776 22.4775 14.8181ZM7.5 3.75H11.25V5.25H7.5V3.75ZM5.08594 6.75H18.9141L20.7891 14.25H3.21094L5.08594 6.75ZM3 18V15.75H21V18H3ZM6 9C6 8.80109 6.07902 8.61032 6.21967 8.46967C6.36032 8.32902 6.55109 8.25 6.75 8.25H8.25C8.44891 8.25 8.63968 8.32902 8.78033 8.46967C8.92098 8.61032 9 8.80109 9 9C9 9.19891 8.92098 9.38968 8.78033 9.53033C8.63968 9.67098 8.44891 9.75 8.25 9.75H6.75C6.55109 9.75 6.36032 9.67098 6.21967 9.53033C6.07902 9.38968 6 9.19891 6 9ZM10.5 9C10.5 8.80109 10.579 8.61032 10.7197 8.46967C10.8603 8.32902 11.0511 8.25 11.25 8.25H12.75C12.9489 8.25 13.1397 8.32902 13.2803 8.46967C13.421 8.61032 13.5 8.80109 13.5 9C13.5 9.19891 13.421 9.38968 13.2803 9.53033C13.1397 9.67098 12.9489 9.75 12.75 9.75H11.25C11.0511 9.75 10.8603 9.67098 10.7197 9.53033C10.579 9.38968 10.5 9.19891 10.5 9ZM15 9C15 8.80109 15.079 8.61032 15.2197 8.46967C15.3603 8.32902 15.5511 8.25 15.75 8.25H17.25C17.4489 8.25 17.6397 8.32902 17.7803 8.46967C17.921 8.61032 18 8.80109 18 9C18 9.19891 17.921 9.38968 17.7803 9.53033C17.6397 9.67098 17.4489 9.75 17.25 9.75H15.75C15.5511 9.75 15.3603 9.67098 15.2197 9.53033C15.079 9.38968 15 9.19891 15 9ZM6 12C6 11.8011 6.07902 11.6103 6.21967 11.4697C6.36032 11.329 6.55109 11.25 6.75 11.25H8.25C8.44891 11.25 8.63968 11.329 8.78033 11.4697C8.92098 11.6103 9 11.8011 9 12C9 12.1989 8.92098 12.3897 8.78033 12.5303C8.63968 12.671 8.44891 12.75 8.25 12.75H6.75C6.55109 12.75 6.36032 12.671 6.21967 12.5303C6.07902 12.3897 6 12.1989 6 12ZM10.5 12C10.5 11.8011 10.579 11.6103 10.7197 11.4697C10.8603 11.329 11.0511 11.25 11.25 11.25H12.75C12.9489 11.25 13.1397 11.329 13.2803 11.4697C13.421 11.6103 13.5 11.8011 13.5 12C13.5 12.1989 13.421 12.3897 13.2803 12.5303C13.1397 12.671 12.9489 12.75 12.75 12.75H11.25C11.0511 12.75 10.8603 12.671 10.7197 12.5303C10.579 12.3897 10.5 12.1989 10.5 12ZM15 12C15 11.8011 15.079 11.6103 15.2197 11.4697C15.3603 11.329 15.5511 11.25 15.75 11.25H17.25C17.4489 11.25 17.6397 11.329 17.7803 11.4697C17.921 11.6103 18 11.8011 18 12C18 12.1989 17.921 12.3897 17.7803 12.5303C17.6397 12.671 17.4489 12.75 17.25 12.75H15.75C15.5511 12.75 15.3603 12.671 15.2197 12.5303C15.079 12.3897 15 12.1989 15 12Z" fill="black" />
        </svg>
    )
}

/**
 * MoneyIcon Component
 */
export const MoneyIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 8.25C11.2583 8.25 10.5333 8.46993 9.91661 8.88199C9.29993 9.29404 8.81928 9.87971 8.53545 10.5649C8.25162 11.2502 8.17736 12.0042 8.32205 12.7316C8.46675 13.459 8.8239 14.1272 9.34835 14.6517C9.8728 15.1761 10.541 15.5333 11.2684 15.6779C11.9958 15.8226 12.7498 15.7484 13.4351 15.4645C14.1203 15.1807 14.706 14.7001 15.118 14.0834C15.5301 13.4667 15.75 12.7417 15.75 12C15.75 11.0054 15.3549 10.0516 14.6517 9.34835C13.9484 8.64509 12.9946 8.25 12 8.25ZM12 14.25C11.555 14.25 11.12 14.118 10.75 13.8708C10.38 13.6236 10.0916 13.2722 9.92127 12.861C9.75097 12.4499 9.70642 11.9975 9.79323 11.561C9.88005 11.1246 10.0943 10.7237 10.409 10.409C10.7237 10.0943 11.1246 9.88005 11.561 9.79323C11.9975 9.70642 12.4499 9.75097 12.861 9.92127C13.2722 10.0916 13.6236 10.38 13.8708 10.75C14.118 11.12 14.25 11.555 14.25 12C14.25 12.5967 14.0129 13.169 13.591 13.591C13.169 14.0129 12.5967 14.25 12 14.25ZM22.5 5.25H1.5C1.30109 5.25 1.11032 5.32902 0.96967 5.46967C0.829018 5.61032 0.75 5.80109 0.75 6V18C0.75 18.1989 0.829018 18.3897 0.96967 18.5303C1.11032 18.671 1.30109 18.75 1.5 18.75H22.5C22.6989 18.75 22.8897 18.671 23.0303 18.5303C23.171 18.3897 23.25 18.1989 23.25 18V6C23.25 5.80109 23.171 5.61032 23.0303 5.46967C22.8897 5.32902 22.6989 5.25 22.5 5.25ZM18.1547 17.25H5.84531C5.5935 16.3984 5.13263 15.6233 4.50467 14.9953C3.87671 14.3674 3.10162 13.9065 2.25 13.6547V10.3453C3.10162 10.0935 3.87671 9.63263 4.50467 9.00467C5.13263 8.37671 5.5935 7.60162 5.84531 6.75H18.1547C18.4065 7.60162 18.8674 8.37671 19.4953 9.00467C20.1233 9.63263 20.8984 10.0935 21.75 10.3453V13.6547C20.8984 13.9065 20.1233 14.3674 19.4953 14.9953C18.8674 15.6233 18.4065 16.3984 18.1547 17.25ZM21.75 8.75344C20.8504 8.36662 20.1334 7.64959 19.7466 6.75H21.75V8.75344ZM4.25344 6.75C3.86662 7.64959 3.14959 8.36662 2.25 8.75344V6.75H4.25344ZM2.25 15.2466C3.14959 15.6334 3.86662 16.3504 4.25344 17.25H2.25V15.2466ZM19.7466 17.25C20.1334 16.3504 20.8504 15.6334 21.75 15.2466V17.25H19.7466Z" fill="black" />
        </svg>
    )
}

/**
 * CreditCardIcon Component
 */
export const CreditCardIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M21 4.5H3C2.60218 4.5 2.22064 4.65804 1.93934 4.93934C1.65804 5.22064 1.5 5.60218 1.5 6V18C1.5 18.3978 1.65804 18.7794 1.93934 19.0607C2.22064 19.342 2.60218 19.5 3 19.5H21C21.3978 19.5 21.7794 19.342 22.0607 19.0607C22.342 18.7794 22.5 18.3978 22.5 18V6C22.5 5.60218 22.342 5.22064 22.0607 4.93934C21.7794 4.65804 21.3978 4.5 21 4.5ZM21 6V8.25H3V6H21ZM21 18H3V9.75H21V18ZM19.5 15.75C19.5 15.9489 19.421 16.1397 19.2803 16.2803C19.1397 16.421 18.9489 16.5 18.75 16.5H15.75C15.5511 16.5 15.3603 16.421 15.2197 16.2803C15.079 16.1397 15 15.9489 15 15.75C15 15.5511 15.079 15.3603 15.2197 15.2197C15.3603 15.079 15.5511 15 15.75 15H18.75C18.9489 15 19.1397 15.079 19.2803 15.2197C19.421 15.3603 19.5 15.5511 19.5 15.75ZM13.5 15.75C13.5 15.9489 13.421 16.1397 13.2803 16.2803C13.1397 16.421 12.9489 16.5 12.75 16.5H11.25C11.0511 16.5 10.8603 16.421 10.7197 16.2803C10.579 16.1397 10.5 15.9489 10.5 15.75C10.5 15.5511 10.579 15.3603 10.7197 15.2197C10.8603 15.079 11.0511 15 11.25 15H12.75C12.9489 15 13.1397 15.079 13.2803 15.2197C13.421 15.3603 13.5 15.5511 13.5 15.75Z" fill="black" />
        </svg>
    )
}

/**
 * BinocularsIcon Component
 */
export const BinocularsIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M22.2375 14.2378C22.1749 14.063 22.1013 13.8924 22.0172 13.7269L18.1181 4.85625C18.0812 4.77081 18.0284 4.69318 17.9625 4.6275C17.6839 4.34885 17.3532 4.12781 16.9891 3.97701C16.6251 3.8262 16.235 3.74858 15.8409 3.74858C15.4469 3.74858 15.0568 3.8262 14.6927 3.97701C14.3287 4.12781 13.998 4.34885 13.7194 4.6275C13.5792 4.76781 13.5003 4.95793 13.5 5.15625V7.5H10.5V5.15625C10.5001 5.05773 10.4807 4.96016 10.4431 4.86911C10.4055 4.77807 10.3503 4.69533 10.2806 4.62563C10.002 4.34698 9.67129 4.12594 9.30727 3.97513C8.94325 3.82432 8.55309 3.7467 8.15906 3.7467C7.76504 3.7467 7.37488 3.82432 7.01085 3.97513C6.64683 4.12594 6.31609 4.34698 6.0375 4.62563C5.97158 4.69131 5.91876 4.76894 5.88188 4.85438L1.98281 13.725C1.89871 13.8905 1.82512 14.0612 1.7625 14.2359C1.54172 14.8537 1.45867 15.5122 1.51918 16.1655C1.57969 16.8187 1.78229 17.4508 2.11279 18.0175C2.44329 18.5842 2.89369 19.0717 3.43245 19.446C3.97121 19.8203 4.58529 20.0723 5.23168 20.1843C5.87806 20.2963 6.54112 20.2657 7.17441 20.0944C7.80769 19.9232 8.39589 19.6156 8.89779 19.1932C9.39968 18.7708 9.80315 18.2437 10.0799 17.6489C10.3567 17.0541 10.5001 16.406 10.5 15.75V9H13.5V15.75C13.4997 16.4061 13.6428 17.0543 13.9194 17.6493C14.196 18.2442 14.5993 18.7715 15.1011 19.1942C15.603 19.6168 16.1911 19.9246 16.8245 20.096C17.4578 20.2674 18.1209 20.2982 18.7674 20.1864C19.4139 20.0745 20.0281 19.8226 20.567 19.4483C21.1059 19.074 21.5564 18.5865 21.887 18.0197C22.2176 17.453 22.4202 16.8209 22.4808 16.1676C22.5413 15.5143 22.4583 14.8556 22.2375 14.2378ZM7.19156 5.60156C7.44161 5.39102 7.75359 5.26793 8.08004 5.251C8.40648 5.23408 8.72952 5.32426 9 5.50781V12.3994C8.41444 11.8736 7.70098 11.5109 6.93111 11.3477C6.16123 11.1845 5.36198 11.2264 4.61344 11.4694L7.19156 5.60156ZM6 18.75C5.40666 18.75 4.82664 18.5741 4.33329 18.2444C3.83994 17.9148 3.45542 17.4462 3.22836 16.8981C3.0013 16.3499 2.94189 15.7467 3.05764 15.1647C3.1734 14.5828 3.45912 14.0482 3.87868 13.6287C4.29824 13.2091 4.83279 12.9234 5.41473 12.8076C5.99667 12.6919 6.59987 12.7513 7.14805 12.9784C7.69623 13.2054 8.16476 13.5899 8.49441 14.0833C8.82405 14.5766 9 15.1567 9 15.75C9 16.5456 8.68393 17.3087 8.12132 17.8713C7.55871 18.4339 6.79565 18.75 6 18.75ZM15 5.50688C15.2705 5.32332 15.5935 5.23314 15.92 5.25006C16.2464 5.26699 16.5584 5.39008 16.8084 5.60063L19.3866 11.4675C18.6379 11.2247 17.8386 11.1829 17.0688 11.3462C16.2989 11.5096 15.5855 11.8725 15 12.3984V5.50688ZM18 18.75C17.4067 18.75 16.8266 18.5741 16.3333 18.2444C15.8399 17.9148 15.4554 17.4462 15.2284 16.8981C15.0013 16.3499 14.9419 15.7467 15.0576 15.1647C15.1734 14.5828 15.4591 14.0482 15.8787 13.6287C16.2982 13.2091 16.8328 12.9234 17.4147 12.8076C17.9967 12.6919 18.5999 12.7513 19.1481 12.9784C19.6962 13.2054 20.1648 13.5899 20.4944 14.0833C20.8241 14.5766 21 15.1567 21 15.75C21 16.5456 20.6839 17.3087 20.1213 17.8713C19.5587 18.4339 18.7956 18.75 18 18.75Z" fill="black" />
        </svg>
    )
}



/**
 * ShieldCheckIcon Component
 */
export const ShieldCheckIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M19.5 3.75H4.5C4.10218 3.75 3.72064 3.90804 3.43934 4.18934C3.15804 4.47064 3 4.85218 3 5.25V10.5C3 15.4425 5.3925 18.4378 7.39969 20.0803C9.56156 21.8484 11.7122 22.4484 11.8059 22.4738C11.9348 22.5088 12.0708 22.5088 12.1997 22.4738C12.2934 22.4484 14.4413 21.8484 16.6059 20.0803C18.6075 18.4378 21 15.4425 21 10.5V5.25C21 4.85218 20.842 4.47064 20.5607 4.18934C20.2794 3.90804 19.8978 3.75 19.5 3.75ZM19.5 10.5C19.5 13.9753 18.2194 16.7962 15.6937 18.8831C14.5943 19.7885 13.344 20.493 12 20.9644C10.6736 20.5012 9.4387 19.8092 8.35125 18.9197C5.79563 16.8291 4.5 13.9969 4.5 10.5V5.25H19.5V10.5ZM7.71937 13.2806C7.57864 13.1399 7.49958 12.949 7.49958 12.75C7.49958 12.551 7.57864 12.3601 7.71937 12.2194C7.86011 12.0786 8.05098 11.9996 8.25 11.9996C8.44902 11.9996 8.63989 12.0786 8.78063 12.2194L10.5 13.9397L15.2194 9.21937C15.2891 9.14969 15.3718 9.09442 15.4628 9.0567C15.5539 9.01899 15.6515 8.99958 15.75 8.99958C15.8485 8.99958 15.9461 9.01899 16.0372 9.0567C16.1282 9.09442 16.2109 9.14969 16.2806 9.21937C16.3503 9.28906 16.4056 9.37178 16.4433 9.46283C16.481 9.55387 16.5004 9.65145 16.5004 9.75C16.5004 9.84855 16.481 9.94613 16.4433 10.0372C16.4056 10.1282 16.3503 10.2109 16.2806 10.2806L11.0306 15.5306C10.961 15.6004 10.8783 15.6557 10.7872 15.6934C10.6962 15.7312 10.5986 15.7506 10.5 15.7506C10.4014 15.7506 10.3038 15.7312 10.2128 15.6934C10.1217 15.6557 10.039 15.6004 9.96937 15.5306L7.71937 13.2806Z" fill="#0F1413" />
        </svg>
    )
}



/**
 * CopyIcon Component
 */
export const CopyIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M20.25 3H8.25C8.05109 3 7.86032 3.07902 7.71967 3.21967C7.57902 3.36032 7.5 3.55109 7.5 3.75V7.5H3.75C3.55109 7.5 3.36032 7.57902 3.21967 7.71967C3.07902 7.86032 3 8.05109 3 8.25V20.25C3 20.4489 3.07902 20.6397 3.21967 20.7803C3.36032 20.921 3.55109 21 3.75 21H15.75C15.9489 21 16.1397 20.921 16.2803 20.7803C16.421 20.6397 16.5 20.4489 16.5 20.25V16.5H20.25C20.4489 16.5 20.6397 16.421 20.7803 16.2803C20.921 16.1397 21 15.9489 21 15.75V3.75C21 3.55109 20.921 3.36032 20.7803 3.21967C20.6397 3.07902 20.4489 3 20.25 3ZM15 19.5H4.5V9H15V19.5ZM19.5 15H16.5V8.25C16.5 8.05109 16.421 7.86032 16.2803 7.71967C16.1397 7.57902 15.9489 7.5 15.75 7.5H9V4.5H19.5V15Z" fill="#0F1413" />
        </svg>
    )
}




/**
 * IdentificationCardIcon Component
 */
export const IdentificationCardIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M18.75 10.5C18.75 10.6989 18.671 10.8897 18.5303 11.0303C18.3897 11.171 18.1989 11.25 18 11.25H14.25C14.0511 11.25 13.8603 11.171 13.7197 11.0303C13.579 10.8897 13.5 10.6989 13.5 10.5C13.5 10.3011 13.579 10.1103 13.7197 9.96967C13.8603 9.82902 14.0511 9.75 14.25 9.75H18C18.1989 9.75 18.3897 9.82902 18.5303 9.96967C18.671 10.1103 18.75 10.3011 18.75 10.5ZM18 12.75H14.25C14.0511 12.75 13.8603 12.829 13.7197 12.9697C13.579 13.1103 13.5 13.3011 13.5 13.5C13.5 13.6989 13.579 13.8897 13.7197 14.0303C13.8603 14.171 14.0511 14.25 14.25 14.25H18C18.1989 14.25 18.3897 14.171 18.5303 14.0303C18.671 13.8897 18.75 13.6989 18.75 13.5C18.75 13.3011 18.671 13.1103 18.5303 12.9697C18.3897 12.829 18.1989 12.75 18 12.75ZM21.75 5.25V18.75C21.75 19.1478 21.592 19.5294 21.3107 19.8107C21.0294 20.092 20.6478 20.25 20.25 20.25H3.75C3.35218 20.25 2.97064 20.092 2.68934 19.8107C2.40804 19.5294 2.25 19.1478 2.25 18.75V5.25C2.25 4.85218 2.40804 4.47064 2.68934 4.18934C2.97064 3.90804 3.35218 3.75 3.75 3.75H20.25C20.6478 3.75 21.0294 3.90804 21.3107 4.18934C21.592 4.47064 21.75 4.85218 21.75 5.25ZM20.25 18.75V5.25H3.75V18.75H20.25ZM12.7256 15.5625C12.7754 15.7552 12.7465 15.9598 12.6454 16.1312C12.5443 16.3026 12.3793 16.4268 12.1866 16.4766C11.9939 16.5263 11.7893 16.4974 11.6179 16.3963C11.4465 16.2952 11.3222 16.1302 11.2725 15.9375C11.0259 14.9756 10.0481 14.25 8.99906 14.25C7.95 14.25 6.97312 14.9756 6.72563 15.9375C6.6759 16.1302 6.55166 16.2952 6.38024 16.3963C6.20882 16.4974 6.00426 16.5263 5.81156 16.4766C5.61887 16.4268 5.45382 16.3026 5.35272 16.1312C5.25163 15.9598 5.22277 15.7552 5.2725 15.5625C5.51588 14.6566 6.09118 13.8755 6.88406 13.3744C6.46272 12.9555 6.17522 12.421 6.05802 11.8386C5.94082 11.2562 5.99918 10.652 6.22572 10.1028C6.45226 9.55361 6.83676 9.08402 7.3305 8.75358C7.82423 8.42315 8.40496 8.24675 8.99906 8.24675C9.59317 8.24675 10.1739 8.42315 10.6676 8.75358C11.1614 9.08402 11.5459 9.55361 11.7724 10.1028C11.9989 10.652 12.0573 11.2562 11.9401 11.8386C11.8229 12.421 11.5354 12.9555 11.1141 13.3744C11.9078 13.8748 12.4836 14.6562 12.7266 15.5625H12.7256ZM9 12.75C9.29667 12.75 9.58668 12.662 9.83335 12.4972C10.08 12.3324 10.2723 12.0981 10.3858 11.824C10.4994 11.5499 10.5291 11.2483 10.4712 10.9574C10.4133 10.6664 10.2704 10.3991 10.0607 10.1893C9.85088 9.97956 9.58361 9.8367 9.29264 9.77882C9.00166 9.72094 8.70006 9.75065 8.42597 9.86418C8.15189 9.97771 7.91762 10.17 7.7528 10.4166C7.58797 10.6633 7.5 10.9533 7.5 11.25C7.5 11.6478 7.65804 12.0294 7.93934 12.3107C8.22064 12.592 8.60218 12.75 9 12.75Z" fill="#0F1413" />
        </svg>
    )
}




/**
 * FastForwardIcon Component
 */
export const FastForwardIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <g clip-path="url(#clip0_206_2252)">
                <path d="M23.3128 10.7494L15.045 5.4844C14.82 5.34056 14.5605 5.25975 14.2937 5.25042C14.0268 5.24109 13.7623 5.30358 13.5278 5.43135C13.2934 5.55913 13.0975 5.74751 12.9607 5.97683C12.8238 6.20615 12.7511 6.46799 12.75 6.73503V10.2319L5.295 5.4844C5.07002 5.34056 4.81054 5.25975 4.54367 5.25042C4.2768 5.24109 4.01232 5.30358 3.77784 5.43135C3.54336 5.55913 3.34748 5.74751 3.21066 5.97683C3.07383 6.20615 3.00108 6.46799 3 6.73503V17.265C3.00139 17.5319 3.07433 17.7936 3.21122 18.0227C3.34811 18.2519 3.54394 18.4401 3.77832 18.5678C4.01269 18.6955 4.27703 18.7581 4.54378 18.7489C4.81054 18.7397 5.06996 18.6592 5.295 18.5157L12.75 13.7682V17.265C12.7514 17.5319 12.8243 17.7936 12.9612 18.0227C13.0981 18.2519 13.2939 18.4401 13.5283 18.5678C13.7627 18.6955 14.027 18.7581 14.2938 18.7489C14.5605 18.7397 14.82 18.6592 15.045 18.5157L23.3128 13.2507C23.5235 13.117 23.6969 12.9322 23.8171 12.7136C23.9373 12.495 24.0003 12.2495 24.0003 12C24.0003 11.7505 23.9373 11.5051 23.8171 11.2865C23.6969 11.0678 23.5235 10.8831 23.3128 10.7494ZM4.5 17.2444V6.75659L12.7331 12L4.5 17.2444ZM14.25 17.2444V6.75659L22.4831 12L14.25 17.2444Z" fill="#0F1413" />
            </g>
            <defs>
                <clipPath id="clip0_206_2252">
                    <rect width="24" height="24" fill="white" />
                </clipPath>
            </defs>
        </svg>
    )
}




/**
 * GavelIcon Component
 */
export const GavelIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M22.8113 10.9397L21.3113 9.43967C21.0569 9.18556 20.7197 9.03129 20.361 9.00496C20.0024 8.97863 19.6463 9.082 19.3575 9.29623L14.7038 4.64248C14.9181 4.3538 15.0216 3.99773 14.9955 3.63913C14.9693 3.28053 14.8152 2.94325 14.5613 2.68873L13.0613 1.18873C12.922 1.0494 12.7566 0.938885 12.5746 0.863481C12.3926 0.788078 12.1975 0.749268 12.0005 0.749268C11.8035 0.749268 11.6084 0.788078 11.4264 0.863481C11.2444 0.938885 11.079 1.0494 10.9397 1.18873L4.93971 7.18873C4.80038 7.32802 4.68987 7.49339 4.61446 7.67541C4.53906 7.85742 4.50025 8.0525 4.50025 8.24951C4.50025 8.44652 4.53906 8.6416 4.61446 8.82361C4.68987 9.00562 4.80038 9.171 4.93971 9.31029L6.43971 10.8103C6.69417 11.064 7.03127 11.218 7.38966 11.2441C7.74805 11.2703 8.10392 11.1669 8.39252 10.9528L9.06471 11.625L2.93533 17.7544C2.52812 18.1997 2.30838 18.785 2.32188 19.3883C2.33537 19.9916 2.58105 20.5665 3.00776 20.9932C3.43447 21.4199 4.00933 21.6656 4.61264 21.6791C5.21596 21.6926 5.80122 21.4728 6.24658 21.0656L12.375 14.9362L13.0472 15.6075C12.8329 15.8962 12.7293 16.2522 12.7555 16.6108C12.7816 16.9694 12.9357 17.3067 13.1897 17.5612L14.6897 19.0612C14.829 19.2006 14.9944 19.3111 15.1764 19.3865C15.3584 19.4619 15.5535 19.5007 15.7505 19.5007C15.9475 19.5007 16.1426 19.4619 16.3246 19.3865C16.5066 19.3111 16.672 19.2006 16.8113 19.0612L22.8113 13.0612C22.9506 12.9219 23.0611 12.7566 23.1365 12.5746C23.2119 12.3925 23.2507 12.1975 23.2507 12.0004C23.2507 11.8034 23.2119 11.6084 23.1365 11.4263C23.0611 11.2443 22.9506 11.079 22.8113 10.9397ZM7.50002 9.74998L6.00002 8.24998L12 2.24998L13.5 3.74998L7.50002 9.74998ZM5.18627 20.0044C5.02818 20.1615 4.81433 20.2497 4.59143 20.2497C4.36852 20.2497 4.15467 20.1615 3.99658 20.0044C3.83972 19.8463 3.75169 19.6327 3.75169 19.41C3.75169 19.1873 3.83972 18.9736 3.99658 18.8156L10.125 12.6862L11.3147 13.875L5.18627 20.0044ZM9.46877 9.9056L13.6556 5.71873L18.2813 10.3444L14.0953 14.5312L9.46877 9.9056ZM15.75 18L14.25 16.5L14.625 16.125L19.875 10.875L20.25 10.5L21.75 12L15.75 18Z" fill="#0F1413" />
        </svg>
    )
}



/**
 * SketchLogoIcon Component
 */
export const SketchLogoIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M23.0625 9.25594L17.8125 3.25594C17.7423 3.17577 17.6558 3.11147 17.5589 3.06734C17.4619 3.02321 17.3566 3.00025 17.25 3H6.75002C6.64346 3.00025 6.53818 3.02321 6.44118 3.06734C6.34419 3.11147 6.25772 3.17577 6.18752 3.25594L0.93752 9.25594C0.815042 9.39577 0.748858 9.57611 0.751803 9.76197C0.754748 9.94784 0.826611 10.126 0.953457 10.2619L11.4535 21.5119C11.5236 21.5871 11.6085 21.6471 11.7029 21.6881C11.7972 21.7291 11.899 21.7503 12.0019 21.7503C12.1048 21.7503 12.2066 21.7291 12.3009 21.6881C12.3953 21.6471 12.4802 21.5871 12.5503 21.5119L23.0503 10.2619C23.1767 10.1255 23.2478 9.94712 23.2501 9.76125C23.2523 9.57539 23.1855 9.39531 23.0625 9.25594ZM20.8472 9H16.875L13.5 4.5H16.9097L20.8472 9ZM6.99189 10.5L9.81658 17.5622L3.22596 10.5H6.99189ZM15.3919 10.5L12 18.9806L8.60814 10.5H15.3919ZM9.00002 9L12 4.99969L15 9H9.00002ZM17.0081 10.5H20.7741L14.1835 17.5622L17.0081 10.5ZM7.09033 4.5H10.5L7.12502 9H3.15283L7.09033 4.5Z" fill="#0F1413" />
        </svg>
    )
}



/**
 * HeartbeatIcon Component
 */
export const HeartbeatIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M6.75 13.5H3C2.80109 13.5 2.61032 13.421 2.46967 13.2803C2.32902 13.1397 2.25 12.9489 2.25 12.75C2.25 12.5511 2.32902 12.3603 2.46967 12.2197C2.61032 12.079 2.80109 12 3 12H6.34875L7.62562 10.0837C7.69409 9.98087 7.78691 9.89651 7.89584 9.83816C8.00477 9.7798 8.12643 9.74927 8.25 9.74927C8.37357 9.74927 8.49523 9.7798 8.60416 9.83816C8.71309 9.89651 8.80591 9.98087 8.87438 10.0837L11.25 13.6462L12.1256 12.3337C12.1942 12.231 12.287 12.1468 12.396 12.0886C12.5049 12.0303 12.6265 11.9999 12.75 12H15C15.1989 12 15.3897 12.079 15.5303 12.2197C15.671 12.3603 15.75 12.5511 15.75 12.75C15.75 12.9489 15.671 13.1397 15.5303 13.2803C15.3897 13.421 15.1989 13.5 15 13.5H13.1512L11.8744 15.4162C11.8059 15.5191 11.7131 15.6035 11.6042 15.6618C11.4952 15.7202 11.3736 15.7507 11.25 15.7507C11.1264 15.7507 11.0048 15.7202 10.8958 15.6618C10.7869 15.6035 10.6941 15.5191 10.6256 15.4162L8.25 11.8519L7.37438 13.1644C7.30604 13.2675 7.21328 13.3521 7.10434 13.4106C6.99541 13.4692 6.87368 13.4999 6.75 13.5ZM16.6875 3.75C14.7516 3.75 13.0566 4.5825 12 5.98969C10.9434 4.5825 9.24844 3.75 7.3125 3.75C5.77146 3.75174 4.29404 4.36468 3.20436 5.45436C2.11468 6.54404 1.50174 8.02146 1.5 9.5625C1.5 9.63281 1.5 9.70312 1.5 9.77344C1.50622 9.97235 1.5912 10.1606 1.73624 10.2969C1.88129 10.4332 2.07453 10.5062 2.27344 10.5C2.47235 10.4938 2.66065 10.4088 2.7969 10.2638C2.93316 10.1187 3.00622 9.92547 3 9.72656C3 9.67219 3 9.61687 3 9.5625C3.00149 8.41921 3.45632 7.32317 4.26475 6.51475C5.07317 5.70632 6.16921 5.25149 7.3125 5.25C9.13594 5.25 10.6669 6.22125 11.3062 7.78125C11.3628 7.91881 11.4589 8.03646 11.5824 8.11926C11.7059 8.20206 11.8513 8.24627 12 8.24627C12.1487 8.24627 12.2941 8.20206 12.4176 8.11926C12.5411 8.03646 12.6372 7.91881 12.6937 7.78125C13.3331 6.21844 14.8641 5.25 16.6875 5.25C17.8308 5.25149 18.9268 5.70632 19.7353 6.51475C20.5437 7.32317 20.9985 8.41921 21 9.5625C21 14.5884 13.71 19.1391 12 20.1375C10.9847 19.5459 8.00344 17.7 5.74875 15.2428C5.68215 15.1702 5.60189 15.1114 5.51255 15.0697C5.42322 15.0281 5.32657 15.0045 5.22811 15.0002C5.12965 14.996 5.03131 15.0111 4.93872 15.0449C4.84612 15.0786 4.76107 15.1303 4.68844 15.1969C4.6158 15.2635 4.55699 15.3437 4.51537 15.4331C4.47375 15.5224 4.45014 15.6191 4.44587 15.7175C4.44161 15.816 4.45677 15.9143 4.49051 16.0069C4.52425 16.0995 4.5759 16.1845 4.6425 16.2572C7.56469 19.4447 11.4797 21.5709 11.6447 21.66C11.7539 21.7188 11.876 21.7495 12 21.7495C12.124 21.7495 12.2461 21.7188 12.3553 21.66C12.7697 21.4369 22.5 16.125 22.5 9.5625C22.4983 8.02146 21.8853 6.54404 20.7956 5.45436C19.706 4.36468 18.2285 3.75174 16.6875 3.75Z" fill="#0F1413" />
        </svg>
    )
}



/**
 * StorefrontIcon Component
 */
export const StorefrontIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M21.75 9C21.7504 8.93027 21.7409 8.86083 21.7219 8.79375L20.3766 4.0875C20.2861 3.77523 20.0971 3.50059 19.8378 3.30459C19.5784 3.10858 19.2626 3.00174 18.9375 3H5.0625C4.73741 3.00174 4.4216 3.10858 4.16223 3.30459C3.90287 3.50059 3.71386 3.77523 3.62344 4.0875L2.27906 8.79375C2.2597 8.86079 2.24991 8.93022 2.25 9V10.5C2.25 11.0822 2.38554 11.6563 2.6459 12.1771C2.90625 12.6978 3.28427 13.1507 3.75 13.5V20.25C3.75 20.4489 3.82902 20.6397 3.96967 20.7803C4.11032 20.921 4.30109 21 4.5 21H19.5C19.6989 21 19.8897 20.921 20.0303 20.7803C20.171 20.6397 20.25 20.4489 20.25 20.25V13.5C20.7157 13.1507 21.0937 12.6978 21.3541 12.1771C21.6145 11.6563 21.75 11.0822 21.75 10.5V9ZM5.0625 4.5H18.9375L20.0081 8.25H3.99469L5.0625 4.5ZM9.75 9.75H14.25V10.5C14.25 11.0967 14.0129 11.669 13.591 12.091C13.169 12.5129 12.5967 12.75 12 12.75C11.4033 12.75 10.831 12.5129 10.409 12.091C9.98705 11.669 9.75 11.0967 9.75 10.5V9.75ZM8.25 9.75V10.5C8.24987 10.8869 8.14996 11.2673 7.95993 11.6043C7.7699 11.9413 7.49617 12.2236 7.16518 12.424C6.83419 12.6244 6.45713 12.736 6.07041 12.7481C5.68369 12.7602 5.30038 12.6724 4.9575 12.4931C4.90533 12.4525 4.84794 12.4191 4.78688 12.3937C4.46913 12.1903 4.20764 11.9103 4.02646 11.5794C3.84527 11.2484 3.7502 10.8773 3.75 10.5V9.75H8.25ZM18.75 19.5H5.25V14.175C5.4969 14.2248 5.74813 14.2499 6 14.25C6.58217 14.25 7.15634 14.1145 7.67705 13.8541C8.19776 13.5937 8.6507 13.2157 9 12.75C9.3493 13.2157 9.80224 13.5937 10.323 13.8541C10.8437 14.1145 11.4178 14.25 12 14.25C12.5822 14.25 13.1563 14.1145 13.6771 13.8541C14.1978 13.5937 14.6507 13.2157 15 12.75C15.3493 13.2157 15.8022 13.5937 16.3229 13.8541C16.8437 14.1145 17.4178 14.25 18 14.25C18.2519 14.2499 18.5031 14.2248 18.75 14.175V19.5ZM19.2122 12.3937C19.1519 12.4191 19.0952 12.4522 19.0434 12.4922C18.7006 12.6716 18.3173 12.7596 17.9305 12.7477C17.5437 12.7357 17.1666 12.6242 16.8355 12.424C16.5044 12.2237 16.2305 11.9414 16.0404 11.6044C15.8502 11.2673 15.7502 10.887 15.75 10.5V9.75H20.25V10.5C20.2497 10.8774 20.1545 11.2486 19.9731 11.5795C19.7918 11.9104 19.5301 12.1904 19.2122 12.3937Z" fill="#0F1413" />
        </svg>
    )
}



/**
 * ScalesIcon Component
 */
export const ScalesIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M22.4466 12.4688L19.4466 4.96875C19.3805 4.80355 19.2579 4.66721 19.1006 4.58409C18.9433 4.50097 18.7615 4.47648 18.5878 4.515L12.75 5.8125V3.75C12.75 3.55109 12.671 3.36032 12.5303 3.21967C12.3897 3.07902 12.1989 3 12 3C11.8011 3 11.6103 3.07902 11.4697 3.21967C11.329 3.36032 11.25 3.55109 11.25 3.75V6.14813L5.08689 7.51781C4.96806 7.54406 4.85741 7.59883 4.76447 7.67739C4.67153 7.75595 4.59911 7.85595 4.55345 7.96875V7.97437L1.55345 15.4688C1.51756 15.5581 1.49941 15.6537 1.50001 15.75C1.50001 17.9353 3.80064 18.75 5.25001 18.75C6.69939 18.75 9.00001 17.9353 9.00001 15.75C9.00062 15.6537 8.98247 15.5581 8.94658 15.4688L6.27376 8.79094L11.25 7.6875V19.5H9.75001C9.5511 19.5 9.36034 19.579 9.21968 19.7197C9.07903 19.8603 9.00001 20.0511 9.00001 20.25C9.00001 20.4489 9.07903 20.6397 9.21968 20.7803C9.36034 20.921 9.5511 21 9.75001 21H14.25C14.4489 21 14.6397 20.921 14.7803 20.7803C14.921 20.6397 15 20.4489 15 20.25C15 20.0511 14.921 19.8603 14.7803 19.7197C14.6397 19.579 14.4489 19.5 14.25 19.5H12.75V7.35187L17.5313 6.29062L15.0535 12.4688C15.0176 12.5581 14.9994 12.6537 15 12.75C15 14.9353 17.3006 15.75 18.75 15.75C20.1994 15.75 22.5 14.9353 22.5 12.75C22.5006 12.6537 22.4825 12.5581 22.4466 12.4688ZM5.25001 17.25C4.54408 17.25 3.11626 16.9116 3.00658 15.8775L5.25001 10.2694L7.49345 15.8775C7.38376 16.9116 5.95595 17.25 5.25001 17.25ZM18.75 14.25C18.0441 14.25 16.6163 13.9116 16.5066 12.8775L18.75 7.26937L20.9935 12.8775C20.8838 13.9116 19.456 14.25 18.75 14.25Z" fill="black" />
        </svg>
    )
}




/**
 * IntersectThreeIcon Component
 */
export const IntersectThreeIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M18.3637 9C18.3703 8.87719 18.375 8.75344 18.375 8.625C18.375 6.93425 17.7033 5.31274 16.5078 4.11719C15.3123 2.92165 13.6907 2.25 12 2.25C10.3092 2.25 8.68773 2.92165 7.49218 4.11719C6.29664 5.31274 5.62499 6.93425 5.62499 8.625C5.62499 8.74969 5.62499 8.87344 5.63624 9C4.86694 9.39368 4.18572 9.93966 3.63396 10.6048C3.08221 11.2699 2.67143 12.0402 2.4266 12.869C2.18177 13.6977 2.108 14.5676 2.20976 15.4258C2.31153 16.2839 2.5867 17.1125 3.01857 17.861C3.45045 18.6095 4.02999 19.2624 4.722 19.78C5.41401 20.2976 6.20403 20.6691 7.04406 20.872C7.88409 21.0748 8.7566 21.1047 9.60855 20.9599C10.4605 20.8152 11.2741 20.4987 12 20.0297C12.7258 20.4987 13.5395 20.8152 14.3914 20.9599C15.2434 21.1047 16.1159 21.0748 16.9559 20.872C17.7959 20.6691 18.586 20.2976 19.278 19.78C19.97 19.2624 20.5495 18.6095 20.9814 17.861C21.4133 17.1125 21.6885 16.2839 21.7902 15.4258C21.892 14.5676 21.8182 13.6977 21.5734 12.869C21.3285 12.0402 20.9178 11.2699 20.366 10.6048C19.8143 9.93966 19.133 9.39368 18.3637 9ZM12 18.1378C11.0896 17.268 10.5519 16.079 10.5 14.8209C11.4826 15.0597 12.508 15.0597 13.4906 14.8209C13.4412 16.0777 12.907 17.2665 12 18.1378ZM12 13.5C11.5537 13.4999 11.1095 13.4383 10.68 13.3172C10.9151 12.4775 11.3709 11.7161 12 11.1122C12.6291 11.7161 13.0849 12.4775 13.32 13.3172C12.8904 13.4383 12.4463 13.4999 12 13.5ZM9.3028 12.6834C8.3304 12.036 7.62176 11.062 7.30499 9.9375C8.45347 9.61341 9.68102 9.72285 10.7541 10.245C10.0937 10.9388 9.59771 11.7721 9.3028 12.6834ZM13.2459 10.2403C14.3195 9.71973 15.5471 9.61196 16.695 9.9375C16.3792 11.0637 15.6705 12.0395 14.6972 12.6881C14.4035 11.7735 13.9075 10.9368 13.2459 10.2403ZM12 3.75C13.2593 3.75038 14.4697 4.23747 15.3782 5.10947C16.2867 5.98146 16.823 7.17087 16.875 8.42906C16.0508 8.22859 15.1947 8.19531 14.3574 8.33122C13.5201 8.46712 12.7185 8.76943 12 9.22031C11.2821 8.77006 10.4813 8.46808 9.64485 8.33219C8.80839 8.1963 7.9532 8.22924 7.12968 8.42906C7.18165 7.17167 7.7173 5.98296 8.62481 5.11109C9.53232 4.23922 10.7415 3.75159 12 3.75ZM3.74999 14.625C3.75039 13.8214 3.94943 13.0304 4.32938 12.3224C4.70934 11.6143 5.25843 11.0112 5.9278 10.5666C6.43919 12.1477 7.54474 13.4684 9.01124 14.25C9.00468 14.3728 8.99999 14.4966 8.99999 14.625C8.9993 16.2577 9.62747 17.8279 10.7541 19.0097C10.0109 19.3705 9.18829 19.5365 8.3634 19.4922C7.5385 19.4478 6.73841 19.1946 6.03821 18.7563C5.33802 18.3179 4.76069 17.7089 4.36044 16.9862C3.96019 16.2636 3.75013 15.4511 3.74999 14.625ZM15.375 19.5C14.6372 19.5009 13.909 19.3332 13.2459 19.0097C14.3725 17.8279 15.0007 16.2577 15 14.625C15 14.5003 14.9953 14.3766 14.9887 14.25C16.456 13.4675 17.5616 12.1454 18.0722 10.5628C18.9449 11.1419 19.608 11.9866 19.9631 12.9719C20.3183 13.9573 20.3467 15.0308 20.044 16.0335C19.7414 17.0362 19.1239 17.9148 18.283 18.5392C17.442 19.1635 16.4224 19.5004 15.375 19.5Z" fill="#0F1413" />
        </svg>
    )
}



/**
 * ShieldWarningIcon Component
 */
export const ShieldWarningIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M11.25 12.75V9C11.25 8.80109 11.329 8.61032 11.4697 8.46967C11.6103 8.32902 11.8011 8.25 12 8.25C12.1989 8.25 12.3897 8.32902 12.5303 8.46967C12.671 8.61032 12.75 8.80109 12.75 9V12.75C12.75 12.9489 12.671 13.1397 12.5303 13.2803C12.3897 13.421 12.1989 13.5 12 13.5C11.8011 13.5 11.6103 13.421 11.4697 13.2803C11.329 13.1397 11.25 12.9489 11.25 12.75ZM12 17.25C12.2225 17.25 12.44 17.184 12.625 17.0604C12.81 16.9368 12.9542 16.7611 13.0394 16.5555C13.1245 16.35 13.1468 16.1238 13.1034 15.9055C13.06 15.6873 12.9528 15.4868 12.7955 15.3295C12.6382 15.1722 12.4377 15.065 12.2195 15.0216C12.0012 14.9782 11.775 15.0005 11.5695 15.0856C11.3639 15.1708 11.1882 15.315 11.0646 15.5C10.941 15.685 10.875 15.9025 10.875 16.125C10.875 16.4234 10.9935 16.7095 11.2045 16.9205C11.4155 17.1315 11.7016 17.25 12 17.25ZM21 5.25V10.5C21 15.4425 18.6075 18.4378 16.6003 20.0803C14.4384 21.8484 12.2878 22.4494 12.1941 22.4738C12.0652 22.5088 11.9292 22.5088 11.8003 22.4738C11.7066 22.4494 9.55875 21.8484 7.39406 20.0803C5.3925 18.4378 3 15.4425 3 10.5V5.25C3 4.85218 3.15804 4.47064 3.43934 4.18934C3.72064 3.90804 4.10218 3.75 4.5 3.75H19.5C19.8978 3.75 20.2794 3.90804 20.5607 4.18934C20.842 4.47064 21 4.85218 21 5.25ZM19.5 5.25H4.5V10.5C4.5 13.9969 5.79562 16.8291 8.35031 18.9197C9.43805 19.8093 10.6733 20.5013 12 20.9644C13.3443 20.4931 14.595 19.7886 15.6947 18.8831C18.2194 16.7962 19.5 13.9753 19.5 10.5V5.25Z" fill="#0F1413" />
        </svg>
    )
}



/**
 * ArrowsMergeIcon Component
 */
export const ArrowsMergeIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M18 3.75V9.75C18.0001 9.84852 17.9807 9.94609 17.9431 10.0371C17.9055 10.1282 17.8503 10.2109 17.7806 10.2806L12.75 15.3103V19.9397L14.4694 18.2194C14.6101 18.0786 14.801 17.9996 15 17.9996C15.199 17.9996 15.3899 18.0786 15.5306 18.2194C15.6714 18.3601 15.7504 18.551 15.7504 18.75C15.7504 18.949 15.6714 19.1399 15.5306 19.2806L12.5306 22.2806C12.461 22.3504 12.3783 22.4057 12.2872 22.4434C12.1962 22.4812 12.0986 22.5006 12 22.5006C11.9014 22.5006 11.8038 22.4812 11.7128 22.4434C11.6217 22.4057 11.539 22.3504 11.4694 22.2806L8.46937 19.2806C8.32864 19.1399 8.24958 18.949 8.24958 18.75C8.24958 18.551 8.32864 18.3601 8.46937 18.2194C8.61011 18.0786 8.80098 17.9996 9 17.9996C9.19902 17.9996 9.3899 18.0786 9.53063 18.2194L11.25 19.9397V15.3103L6.21937 10.2806C6.14975 10.2109 6.09454 10.1282 6.0569 10.0371C6.01926 9.94609 5.99992 9.84852 6 9.75V3.75C6 3.55109 6.07902 3.36032 6.21967 3.21967C6.36032 3.07902 6.55109 3 6.75 3C6.94891 3 7.13968 3.07902 7.28033 3.21967C7.42098 3.36032 7.5 3.55109 7.5 3.75V9.43969L12 13.9397L16.5 9.43969V3.75C16.5 3.55109 16.579 3.36032 16.7197 3.21967C16.8603 3.07902 17.0511 3 17.25 3C17.4489 3 17.6397 3.07902 17.7803 3.21967C17.921 3.36032 18 3.55109 18 3.75Z" fill="#0F1413" />
        </svg>
    )
}


/**
 * CaretLeftIcon Component
 */
export const CaretLeftIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            className={className}
            fill="none">
            <path d="M15.5307 18.9698C15.6004 19.0395 15.6557 19.1222 15.6934 19.2132C15.7311 19.3043 15.7505 19.4019 15.7505 19.5004C15.7505 19.599 15.7311 19.6965 15.6934 19.7876C15.6557 19.8786 15.6004 19.9614 15.5307 20.031C15.461 20.1007 15.3783 20.156 15.2873 20.1937C15.1962 20.2314 15.0986 20.2508 15.0001 20.2508C14.9016 20.2508 14.804 20.2314 14.7129 20.1937C14.6219 20.156 14.5392 20.1007 14.4695 20.031L6.96948 12.531C6.89974 12.4614 6.84443 12.3787 6.80668 12.2876C6.76894 12.1966 6.74951 12.099 6.74951 12.0004C6.74951 11.9019 6.76894 11.8043 6.80668 11.7132C6.84443 11.6222 6.89974 11.5394 6.96948 11.4698L14.4695 3.96979C14.6102 3.82906 14.8011 3.75 15.0001 3.75C15.1991 3.75 15.39 3.82906 15.5307 3.96979C15.6715 4.11052 15.7505 4.30139 15.7505 4.50042C15.7505 4.69944 15.6715 4.89031 15.5307 5.03104L8.56041 12.0004L15.5307 18.9698Z"
                fill={"currentColor"} />
        </svg>
    )
}




/**
 * CaretRightIcon Component
 */
export const CaretRightIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            className={className}
            fill="none">
            <path d="M17.0306 12.531L9.53055 20.031C9.46087 20.1007 9.37815 20.156 9.2871 20.1937C9.19606 20.2314 9.09847 20.2508 8.99993 20.2508C8.90138 20.2508 8.8038 20.2314 8.71276 20.1937C8.62171 20.156 8.53899 20.1007 8.4693 20.031C8.39962 19.9614 8.34435 19.8786 8.30663 19.7876C8.26892 19.6965 8.24951 19.599 8.24951 19.5004C8.24951 19.4019 8.26892 19.3043 8.30663 19.2132C8.34435 19.1222 8.39962 19.0395 8.4693 18.9698L15.4396 12.0004L8.4693 5.03104C8.32857 4.89031 8.24951 4.69944 8.24951 4.50042C8.24951 4.30139 8.32857 4.11052 8.4693 3.96979C8.61003 3.82906 8.80091 3.75 8.99993 3.75C9.19895 3.75 9.38982 3.82906 9.53055 3.96979L17.0306 11.4698C17.1003 11.5394 17.1556 11.6222 17.1933 11.7132C17.2311 11.8043 17.2505 11.9019 17.2505 12.0004C17.2505 12.099 17.2311 12.1966 17.1933 12.2876C17.1556 12.3787 17.1003 12.4614 17.0306 12.531Z"
                fill={"currentColor"} />
        </svg>
    )
}



/**
 * XIcon Component
 */
export const XIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="30" height="30" viewBox="0 0 30 30"
            fill="none"
            className={className}>
            <path d="M4 5L11.7782 16.1161L4.40893 24.7314H7.30356L13.0735 17.968L17.8052 24.7314H25.38L17.2442 13.0844L24.1404 5H21.2907L15.9532 11.2346L11.5984 5H4ZM8.2092 7.19238H10.4551L21.1729 22.539H18.9463L8.2092 7.19238Z"
                fill={"currentColor"} />
        </svg>
    )
}






/**
 * YoutubeIcon Component
 */
export const YoutubeIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none"
            className={className}>
            <path d="M26.4984 7.7325C26.2224 6.6575 25.4088 5.81 24.3768 5.5225C22.5048 5 15 5 15 5C15 5 7.4952 5 5.6232 5.5225C4.5912 5.81 3.7776 6.6575 3.5016 7.7325C3 9.6825 3 15 3 15C3 15 3 20.3175 3.5016 22.2675C3.7776 23.3425 4.5912 24.19 5.6232 24.4775C7.4952 25 15 25 15 25C15 25 22.5048 25 24.3768 24.4775C25.41 24.19 26.2224 23.3425 26.4984 22.2675C27 20.3175 27 15 27 15C27 15 27 9.6825 26.4984 7.7325ZM12.6 18.2475V11.7525C12.6 11.2713 13.1004 10.9713 13.5 11.2112L18.9 14.4588C19.2996 14.6988 19.2996 15.3012 18.9 15.5412L13.5 18.7887C13.1004 19.03 12.6 18.7287 12.6 18.2475Z"
                fill={"currentColor"} />
        </svg>
    )
}




/**
 * FacebookIcon Component
 */
export const FacebookIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none"
            className={className}>
            <path d="M15 3C8.373 3 3 8.373 3 15C3 21.016 7.432 25.984 13.206 26.852V18.18H10.237V15.026H13.206V12.927C13.206 9.452 14.899 7.927 17.787 7.927C19.17 7.927 19.902 8.03 20.248 8.076V10.829H18.278C17.052 10.829 16.624 11.992 16.624 13.302V15.026H20.217L19.73 18.18H16.624V26.877C22.481 26.083 27 21.075 27 15C27 8.373 21.627 3 15 3Z"
                fill={"currentColor"} />
        </svg>
    )
}



/**
 * InstagramIcon Component
 */
export const InstagramIcon: React.FC<GeneralIconProps> = ({
    isActive = false,
    className = '',
    size = 'md',
    variant = 'default'
}) => {

    // Obtener el tamaño según la prop
    const getSize = (): { width: string, height: string } => {
        switch (size) {
            case "sm": return { width: "20px", height: "20px" };
            case "md": return { width: "24px", height: "24px" };
            case "lg": return { width: "28px", height: "28px" };
            default: return { width: "24px", height: "24px" };
        }
    };

    // Determinar color basado en variante y estado activo
    const getColor = () => {
        if (isActive) return "#4285F4";

        if (variant === "primary") {
            return "currentColor"; // Heredará el color del elemento padre
        }

        return "currentColor"; // Heredará el color del elemento padre
    };

    const { width, height } = getSize();

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none"
            className={className}>
            <path d="M9.99805 3C6.13905 3 3 6.14195 3 10.002V20.002C3 23.861 6.14195 27 10.002 27H20.002C23.861 27 27 23.858 27 19.998V9.99805C27 6.13905 23.858 3 19.998 3H9.99805ZM22 7C22.552 7 23 7.448 23 8C23 8.552 22.552 9 22 9C21.448 9 21 8.552 21 8C21 7.448 21.448 7 22 7ZM15 9C18.309 9 21 11.691 21 15C21 18.309 18.309 21 15 21C11.691 21 9 18.309 9 15C9 11.691 11.691 9 15 9ZM15 11C13.9391 11 12.9217 11.4214 12.1716 12.1716C11.4214 12.9217 11 13.9391 11 15C11 16.0609 11.4214 17.0783 12.1716 17.8284C12.9217 18.5786 13.9391 19 15 19C16.0609 19 17.0783 18.5786 17.8284 17.8284C18.5786 17.0783 19 16.0609 19 15C19 13.9391 18.5786 12.9217 17.8284 12.1716C17.0783 11.4214 16.0609 11 15 11Z"
                fill={"currentColor"} />
        </svg>
    )
}
